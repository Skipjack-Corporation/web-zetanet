{"version":3,"file":"ReactSlideToggle.umd.js","sources":["../src/library/ReactSlideToggle/SlideToggle.js"],"sourcesContent":["/*\r\n  _state_ is internal state for sync and rendering control.\r\n  setState is async and I need sync control because timing is important\r\n  and because I need to control what is to be re-rendered.\r\n*/\r\n\r\nimport React from \"react\";\r\n//import PropTypes from 'prop-types';\r\n\r\n// Support browser or node env\r\nconst root = typeof window !== \"undefined\" ? window : global;\r\nconst rAF = root.requestAnimationFrame\r\n  ? root.requestAnimationFrame.bind(root)\r\n  : callback => root.setTimeout(callback, 16);\r\nconst cAF = root.cancelAnimationFrame\r\n  ? root.cancelAnimationFrame.bind(root)\r\n  : root.clearInterval.bind(root);\r\n\r\nconst TOGGLE = Object.freeze({\r\n  EXPANDED: \"EXPANDED\",\r\n  COLLAPSED: \"COLLAPSED\",\r\n  EXPANDING: \"EXPANDING\",\r\n  COLLAPSING: \"COLLAPSING\"\r\n});\r\n\r\nconst easeInOutCubic = t =>\r\n  t < 0.5 ? 4 * t * t * t : 0.5 * Math.pow(2 * t - 2, 3) + 1;\r\n\r\nconst util = {\r\n  isMoving: toggleState =>\r\n    toggleState === TOGGLE.EXPANDING || toggleState === TOGGLE.COLLAPSING,\r\n  clamp: ({ value, max = 1, min = 0 }) => {\r\n    if (value > max) return max;\r\n    if (value < min) return min;\r\n    return value;\r\n  },\r\n  now: () => Date.now(),\r\n  sanitizeDuration: duration => Math.max(0, parseInt(+duration, 10) || 0),\r\n  interpolate: ({ next, prev }) => {\r\n    /*\r\n      If the diff in the next rAF is big, it can seem jumpy when reversing the toggling\r\n      This is heuristic approach to minimize the diff value by interpolating.\r\n    */\r\n    const diff = Math.abs(next - prev);\r\n    let interpolated = next;\r\n    if (diff > 0.15) {\r\n      /* heuristic value */\r\n      if (next > prev) interpolated -= diff * 0.75;\r\n      /* heuristic value */ else\r\n        interpolated += diff * 0.75; /* heuristic value */\r\n    }\r\n    return interpolated;\r\n  }\r\n};\r\n\r\nexport default class SlideToggle extends React.Component {\r\n  static defaultProps = {\r\n    duration: 300,\r\n    easeCollapse: easeInOutCubic,\r\n    easeExpand: easeInOutCubic\r\n  };\r\n\r\n  // Internal state\r\n  _state_ = {\r\n    collapsibleElement: null,\r\n    toggleState: this.props.collapsed ? TOGGLE.COLLAPSED : TOGGLE.EXPANDED\r\n  };\r\n\r\n  GET_HEIGHT = this.props.offsetHeight ? \"offsetHeight\" : \"scrollHeight\";\r\n\r\n  // React state\r\n  state = {\r\n    toggleState: this._state_.toggleState,\r\n    hasReversed: false,\r\n    range: this.props.collapsed ? 0 : 1,\r\n    progress: this.props.collapsed ? 0 : 1\r\n  };\r\n\r\n  render() {\r\n    const data = {\r\n      onToggle: this.onToggle,\r\n      setCollapsibleElement: this.setCollapsibleElement,\r\n      toggleState: this.state.toggleState,\r\n      hasReversed: this.state.hasReversed,\r\n      isMoving: util.isMoving(this.state.toggleState),\r\n      range: this.state.range,\r\n      progress: this.state.progress\r\n    };\r\n\r\n    if (this.props.children) return this.props.children(data);\r\n    if (this.props.render) return this.props.render(data);\r\n\r\n    return null;\r\n  }\r\n\r\n  getCollapsible = () => this._state_.collapsibleElement;\r\n\r\n  updateCollapsible = (attr, value) => {\r\n    if (this.getCollapsible()) {\r\n      this._state_.collapsibleElement.style[attr] = value;\r\n    }\r\n  };\r\n\r\n  setCollapsibleElement = element => {\r\n    this._state_.collapsibleElement = element;\r\n    if (this._state_.toggleState === TOGGLE.COLLAPSED) {\r\n      this.setCollapsedState({ initialState: true });\r\n    }\r\n  };\r\n\r\n  onToggle = () => {\r\n    if (this.props.irreversible && util.isMoving(this._state_.toggleState)) {\r\n      return;\r\n    }\r\n\r\n    const invokeCollapsing = () => {\r\n      this.props.onCollapsing &&\r\n        this.props.onCollapsing({\r\n          range: this.state.range,\r\n          progress: this.state.progress,\r\n          hasReversed: this.state.hasReversed\r\n        });\r\n\r\n      this.collapse();\r\n    };\r\n    const invokeExpanding = () => {\r\n      this.props.onExpanding &&\r\n        this.props.onExpanding({\r\n          range: this.state.range,\r\n          progress: this.state.progress,\r\n          hasReversed: this.state.hasReversed\r\n        });\r\n\r\n      this.expand();\r\n    };\r\n\r\n    const updateInternalState = ({ toggleState, display, hasReversed }) => {\r\n      this._state_.toggleState = toggleState;\r\n      this._state_.hasReversed = !!hasReversed;\r\n\r\n      if (display !== undefined && !this.props.noDisplayStyle) {\r\n        this.updateCollapsible(\"display\", display);\r\n      }\r\n\r\n      const now = util.now();\r\n\r\n      if (hasReversed) {\r\n        const { startTime } = this._state_;\r\n        const duration = util.sanitizeDuration(this.props.duration);\r\n        const elapsedTime = Math.min(duration, now - startTime);\r\n        const subtract = Math.max(0, duration - elapsedTime);\r\n        this._state_.startTime = now - subtract;\r\n      } else {\r\n        const collapsible = this.getCollapsible();\r\n        if (collapsible && collapsible.style.height) {\r\n          this.updateCollapsible(\"height\", null);\r\n        }\r\n        this._state_.boxHeight = collapsible ? collapsible[this.GET_HEIGHT] : 0;\r\n        this._state_.startTime = now;\r\n        this._state_.startDirection = toggleState;\r\n      }\r\n\r\n      this.setState({\r\n        toggleState: this._state_.toggleState,\r\n        hasReversed: this._state_.hasReversed\r\n      });\r\n    };\r\n\r\n    switch (this._state_.toggleState) {\r\n      case TOGGLE.EXPANDED:\r\n        updateInternalState({ toggleState: TOGGLE.COLLAPSING });\r\n        invokeCollapsing();\r\n        break;\r\n      case TOGGLE.COLLAPSED:\r\n        updateInternalState({\r\n          toggleState: TOGGLE.EXPANDING,\r\n          display: \"\"\r\n        });\r\n        invokeExpanding();\r\n        break;\r\n      case TOGGLE.EXPANDING:\r\n        updateInternalState({\r\n          toggleState: TOGGLE.COLLAPSING,\r\n          hasReversed: true\r\n        });\r\n        invokeCollapsing();\r\n        break;\r\n      case TOGGLE.COLLAPSING:\r\n        updateInternalState({\r\n          toggleState: TOGGLE.EXPANDING,\r\n          display: \"\",\r\n          hasReversed: true\r\n        });\r\n        invokeExpanding();\r\n        break;\r\n    }\r\n  };\r\n\r\n  setExpandedState = () => {\r\n    this._state_.progress = 1;\r\n    this._state_.toggleState = TOGGLE.EXPANDED;\r\n    this.updateCollapsible(\"height\", null);\r\n    this.setState({\r\n      toggleState: TOGGLE.EXPANDED,\r\n      range: 1,\r\n      progress: this._state_.progress\r\n    });\r\n    if (this.props.onExpanded) {\r\n      this.props.onExpanded({\r\n        hasReversed: this.state.hasReversed\r\n      });\r\n    }\r\n  };\r\n\r\n  expand = () => {\r\n    if (this._state_.toggleState !== TOGGLE.EXPANDING) {\r\n      return;\r\n    }\r\n\r\n    const duration = util.sanitizeDuration(this.props.duration);\r\n    if (duration <= 0) {\r\n      this.setExpandedState();\r\n      return;\r\n    }\r\n\r\n    const { startTime } = this._state_;\r\n    const elapsedTime = Math.min(duration, util.now() - startTime);\r\n\r\n    if (elapsedTime >= duration) {\r\n      this.setExpandedState();\r\n    } else {\r\n      const { startDirection, toggleState, boxHeight } = this._state_;\r\n      const range = util.clamp({ value: elapsedTime / duration });\r\n\r\n      let progress;\r\n      if (\r\n        this.props.whenReversedUseBackwardEase &&\r\n        startDirection !== toggleState\r\n      ) {\r\n        progress = 1 - this.props.easeCollapse(1 - range);\r\n      } else {\r\n        progress = this.props.easeExpand(range);\r\n      }\r\n\r\n      if (!this.props.bestPerformance) {\r\n        this.setState({\r\n          range,\r\n          progress\r\n        });\r\n      }\r\n\r\n      if (this.props.interpolateOnReverse && this._state_.hasReversed) {\r\n        progress = util.interpolate({\r\n          next: progress,\r\n          prev: this._state_.progress\r\n        });\r\n      }\r\n\r\n      const currentHeightValue = Math.round(boxHeight * progress);\r\n      this._state_.progress = progress;\r\n      this.updateCollapsible(\"height\", `${currentHeightValue}px`);\r\n      this.nextTick(this.expand);\r\n    }\r\n  };\r\n\r\n  setCollapsedState = ({ initialState } = {}) => {\r\n    this._state_.progress = 0;\r\n    this._state_.toggleState = TOGGLE.COLLAPSED;\r\n\r\n    if (!this.props.noDisplayStyle) {\r\n      this.updateCollapsible(\"display\", \"none\");\r\n      this.updateCollapsible(\"height\", null);\r\n    } else {\r\n      this.updateCollapsible(\"height\", \"0px\");\r\n    }\r\n\r\n    this.setState({\r\n      toggleState: TOGGLE.COLLAPSED,\r\n      range: 0,\r\n      progress: this._state_.progress\r\n    });\r\n    if (!initialState && this.props.onCollapsed)\r\n      this.props.onCollapsed({\r\n        hasReversed: this.state.hasReversed\r\n      });\r\n  };\r\n\r\n  collapse = () => {\r\n    if (this._state_.toggleState !== TOGGLE.COLLAPSING) {\r\n      return;\r\n    }\r\n    const duration = util.sanitizeDuration(this.props.duration);\r\n    if (duration <= 0) {\r\n      this.setCollapsedState();\r\n      return;\r\n    }\r\n\r\n    const { startTime } = this._state_;\r\n    const elapsedTime = Math.min(duration, util.now() - startTime);\r\n\r\n    if (elapsedTime >= duration) {\r\n      this.setCollapsedState();\r\n    } else {\r\n      const { startDirection, boxHeight, toggleState } = this._state_;\r\n      const range = 1 - util.clamp({ value: elapsedTime / duration });\r\n\r\n      const {\r\n        whenReversedUseBackwardEase,\r\n        easeExpand,\r\n        easeCollapse\r\n      } = this.props;\r\n\r\n      let progress;\r\n      if (whenReversedUseBackwardEase && startDirection !== toggleState) {\r\n        progress = easeExpand(range);\r\n      } else {\r\n        progress = 1 - easeCollapse(1 - range);\r\n      }\r\n\r\n      if (!this.props.bestPerformance) {\r\n        this.setState({\r\n          range,\r\n          progress\r\n        });\r\n      }\r\n\r\n      if (this.props.interpolateOnReverse && this._state_.hasReversed) {\r\n        progress = util.interpolate({\r\n          next: progress,\r\n          prev: this._state_.progress\r\n        });\r\n      }\r\n\r\n      const currentHeightValue = Math.round(boxHeight * progress);\r\n      this._state_.progress = progress;\r\n      this._state_.timeout = this.nextTick(this.collapse);\r\n      this.updateCollapsible(\"height\", `${currentHeightValue}px`);\r\n    }\r\n  };\r\n\r\n  nextTick = callback => {\r\n    this._state_.timeout = rAF(callback);\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    this._state_.timeout && cAF(this._state_.timeout);\r\n  }\r\n}\r\n\r\n// SlideToggle.propTypes = {\r\n//   render: PropTypes.func,\r\n//     children: PropTypes.func,\r\n//     duration: PropTypes.number,\r\n//     irreversible: PropTypes.bool,\r\n//     whenReversedUseBackwardEase: PropTypes.bool,\r\n//     noDisplayStyle: PropTypes.bool,\r\n//     bestPerformance: PropTypes.bool,\r\n//     interpolateOnReverse: PropTypes.bool,\r\n//     easeCollapse: PropTypes.func,\r\n//     easeExpand: PropTypes.func,\r\n//     collapsed: PropTypes.bool,\r\n//     onExpanded: PropTypes.func,\r\n//     onExpanding: PropTypes.func,\r\n//     onCollapsed: PropTypes.func,\r\n//     onCollapsing: PropTypes.func,\r\n//     scrollHeight: PropTypes.bool,\r\n// }\r\n"],"names":["root","window","global","rAF","requestAnimationFrame","bind","callback","setTimeout","cAF","cancelAnimationFrame","clearInterval","TOGGLE","Object","freeze","EXPANDED","COLLAPSED","EXPANDING","COLLAPSING","easeInOutCubic","t","Math","pow","util","isMoving","toggleState","clamp","value","max","min","now","Date","sanitizeDuration","duration","parseInt","interpolate","next","prev","diff","abs","interpolated","SlideToggle","collapsibleElement","_this","props","collapsed","offsetHeight","_state_","hasReversed","range","progress","attr","getCollapsible","style","element","setCollapsedState","initialState","irreversible","invokeCollapsing","onCollapsing","state","collapse","invokeExpanding","onExpanding","expand","updateInternalState","display","undefined","noDisplayStyle","updateCollapsible","startTime","elapsedTime","subtract","collapsible","height","boxHeight","GET_HEIGHT","startDirection","setState","onExpanded","setExpandedState","whenReversedUseBackwardEase","easeCollapse","easeExpand","bestPerformance","interpolateOnReverse","currentHeightValue","round","nextTick","onCollapsed","timeout","React","Component","data","onToggle","this","setCollapsibleElement","children","render"],"mappings":"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"}